// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// schema.prisma
model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String    // Should be hashed before storage
  name           String?
  username       String?   @unique
  emailVerified  DateTime?
  image          String?
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relationships
  sessions      Session[]
  accounts      Account[]

  

  @@map("users")
}

enum Role {
  USER
  ADMIN
  EDITOR
}

// For OAuth/email verification (optional but recommended)
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String  // "oauth" | "email" | "credentials"
  provider          String  // "google", "github", etc.
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}


// -------------------------------------
model Portfolio {
  id          String     @id @default(uuid())
  title       String
  description String?
  coverImage  String     @map("cover_image")  // Main display image
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Category relation (kept as per your request)
  categoryId String
  category   Category   @relation(fields: [categoryId], references: [id])
  
  // Files relation (multiple attachments)
  files      PortfolioFile[]
  
  // Tags (comma-separated string)
  tags       String
  
  @@index([categoryId])
  @@map("portfolios")
}

model PortfolioFile {
  id          String    @id @default(uuid())
  url         String
  name        String
  type        String    // "image", "video", "document", "pdf", etc.
  size        Int       // File size in bytes
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  createdAt   DateTime @default(now())
  
  @@index([portfolioId])
  @@map("portfolio_files")
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  slug        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  portfolios Portfolio[]
  
  @@map("categories")
}
